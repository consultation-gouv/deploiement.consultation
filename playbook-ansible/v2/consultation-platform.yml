---
- hosts: pprod
  remote_user: root

  vars:
    mongodump_archive: "consultation-tools.mongodump.gz"

  vars_prompt:
    - name: "env"
      prompt: "Choose the environment (pprod or production)"
      private: no

    - name: "user"
      prompt: "Choose the app's username in the server"
      private: no

    - name: "adminemail"
      prompt: "Set your contact email for certificate and monitoring alert"
      private: no

    - name: "mongosu"
      prompt: "Set your mongodb superAdmin username"
      private: no

    - name: "mongosupass"
      prompt: "Set your mongodb superAdmin password"
      private: yes

    - name: "mongogppass"
      prompt: "Set the mongodb password for the app's user "
      private: yes

    - name: "domainname"
      prompt: "Set your domain name for your server"
      private: no

    - name: "sendgriduser"
      prompt: "Enter your sendgrid username"
      private: no

    - name: "sendgridpass"
      prompt: "Enter your sendgrid password"
      private: yes

    - name: "sendgridapikey"
      prompt: "Enter your sendgrid API key"
      private: yes

    - name: "xapikey"
      prompt: "Enter your x-api-key"
      private: yes

    - name: "monitpass"
      prompt: "Set the password for the monitoring interface access, the username will be the app's user"
      private: yes

  tasks:
  # - name: utf8 locale
  #   action: command sudo update-locale LC_ALL=C.UTF-8

  - name: set default locale
    lineinfile: dest=/etc/environment
      regexp="LC_ALL"
      line="LC_ALL=\"C.UTF-8\""

  - name: Create '{{ user }}' users in instance
    user: name={{ user }} shell=/bin/bash createhome=yes comment='main user'

  - name: Add '{{ user }}' to sudoers
    template: src=templates/sudoers-user.j2 dest=/etc/sudoers validate='visudo -cf %s'

  - name: Add master public key to '{{ user }}' in instance
    authorized_key: user={{ user }} key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

  - name: Add repo in apt sources
    template: src=templates/sources_list.j2 dest=/etc/apt/sources.list

  - name: Add apt key for mongodb repo
    command: apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927

  - name: Update apt cache
    apt: update_cache=yes

  - name: Install required packages
    apt: name={{ item }} state=present
    with_items:
        - git
        - curl
        - mongodb-org
        - nginx
        - python-pip
        - fail2ban
        - monit
        - ntpdate

  - name: Install certbot
    apt: name=certbot state=present default_release=jessie-backports

  - name: update date and hour
    command: ntpdate fr.pool.ntp.org

  - name: Install NodeJS and NPM
    command: "{{ item }}"
    with_items:
        - sudo -u {{ user }} bash -lc "curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -"
        - sudo -u {{ user }} bash -lc "sudo apt install -y nodejs"
        - sudo -u {{ user }} bash -lc "sudo apt install -y build-essential"

  - name: Install pm2
    npm: name=pm2 global=yes

  - name: Stop monit service
    service: name=monit state=stopped

  - name: Install pymongo module
    pip: name=pymongo

  - name: Start mongod service
    service: name=mongod state=started enabled=true

  - name: Configure mongodb DB superuser
    mongodb_user: database=admin name={{ mongosu }} password={{ mongosupass }} state=present roles='root'
    no_log: true

  - name: Restart mongod service
    service: name=mongod state=restarted enabled=true

  - name: Configure mongodb DB {{ user }} user
    mongodb_user: login_user={{ mongosu }} login_password={{ mongosupass }} database=db_deploy name={{ user }} password={{ mongogppass }} state=present roles='readWrite'
    no_log: true


  - name: Set mongodb PID file
    file: src=/var/lib/mongodb/mongod.lock dest=/var/run/mongod.pid state=link

  - name: Restart mongod service
    service: name=mongod state=restarted enabled=true

  - name: Clone consultation-app from repository
    git: accept_hostkey=yes repo=https://github.com/consultation-gouv/deploiement.consultation.git dest=/home/{{ user }}/consultation-app force=yes

  - name: Clone consultation-website from repository
    git: accept_hostkey=yes repo=https://github.com/consultation-gouv/consultation.gouv.fr.git dest=/home/{{ user }}/consultation-website force=yes refspec={{ env }}

#  - name: Get ssl certificate for website, app and monit interface
#    command: "{{ item }}"
#    with_items:
#      - letsencrypt certonly --standalone --domain {{ domainname }} --email {{ adminemail }} --agree-tos -n
#      - letsencrypt certonly --standalone --domain deploiement.{{ domainname }} --email {{ adminemail }} --agree-tos -n
#      - letsencrypt certonly --standalone --domain monitoring.{{ domainname }} --email {{ adminemail }} --agree-tos -n

  # - name: Add images to consultation-app
  #   copy: src=~/consultation-app_ansible-playbook-v2/images dest=/home/{{ user }}/consultation-app/public/ owner={{ user }} group={{ user }} mode="u=rw,g=r,o=r"
  #   no_log: true

  - name: Set website web front
    template: src=templates/nginx-front-ssl_website.conf dest=/etc/nginx/sites-available/default

  - name: Set app web front
    template: src=templates/nginx-front-ssl_app.conf dest=/etc/nginx/sites-available/deploiement.{{ domainname }}

  - name: Set api web front
    template: src=templates/nginx-front-ssl_api.conf dest=/etc/nginx/sites-available/api.{{ domainname }}

  - name: Set monitoring web front
    template: src=templates/nginx-front-ssl_monit.conf dest=/etc/nginx/sites-available/monitoring.{{ domainname }}

  - name: enable app site
    file: src=/etc/nginx/sites-available/deploiement.{{ domainname }} dest=/etc/nginx/sites-enabled/deploiement.{{ domainname }} state=link

  - name: enable api site
    file: src=/etc/nginx/sites-available/api.{{ domainname }} dest=/etc/nginx/sites-enabled/api.{{ domainname }} state=link

  - name: enable main site
    file: src=/etc/nginx/sites-available/default dest=/etc/nginx/sites-enabled/default state=link

  - name: enable monitoring site
    file: src=/etc/nginx/sites-available/monitoring.{{ domainname }} dest=/etc/nginx/sites-enabled/monitoring.{{ domainname }} state=link
    when: env == "prod"

  - name: restart nginx service
    service: name=nginx state=restarted

  - name: create .env file
    template: src=templates/env_file dest=/home/{{ user }}/consultation-app/.env
    no_log: true

  - name: create .env file for api server
    template: src=templates/env_file dest=/home/{{ user }}/consultation-app/node_api_server/.env

  - name: Change owner of consultation-app
    file: path={{ item }} owner={{ user }} group={{ user }} mode=u=rwX,g=rX,o=rX recurse=yes state=directory
    with_items:
      - /home/{{ user }}/consultation-app
      - /home/{{ user }}/consultation-app/node_modules

  - name: copy reference database dump to instance
    copy: src=file/{{ mongodump_archive }} dest=/home/{{ user }}/ owner={{ user }} group={{ user }} mode="u=rw,g=r,o=r"

  - name: fill in database from the dump
    command: "/usr/bin/mongorestore --gzip --archive={{ mongodump_archive }} chdir=/home/{{ user }}/"

  - name: Install required node packages and launch platform
    command: "{{ item }} chdir=/home/{{ user }}/consultation-app"
    with_items:
      # - npm install -g ogp-consultation-verification
      - npm install
      - sudo -u {{ user }} bash -lc "cd /home/{{ user }}/consultation-app/node_api_server && npm install"
      - sudo -u {{ user }} bash -lc "cd /home/{{ user }}/consultation-app && pm2 start ecosystem.json"
      - sudo -u {{ user }} bash -lc "pm2 stop 0"
      - sudo -u {{ user }} bash -lc "pm2 start 0"

  - name: Install Ruby with RVM
    script: file/install-rvm.sh

  - name: Install Jekyll, deps and generate website
    command: "{{ item }} chdir=/home/{{ user }}/consultation-website"
    with_items:
      - gem install bundle
      - bundle install
      - bundle exec jekyll build

  - name: Change owner of consultation-website
    file: path={{ item }} owner={{ user }} group={{ user }} mode=755 recurse=yes
    with_items:
      - /home/{{ user }}/consultation-website

  - name: create email-report.sh
    template: src=templates/email-report.sh dest=/home/{{ user }}/consultation-app/email-report.sh mode=755

  - name: install email-report cron
    when: env == "prod"
    cron:
      name: "Daily email report"
      special_time: daily
      job: /home/{{ user }}/consultation-app/email-report.sh

  - name: Set configuration for monitoring
    template: src=templates/monitconf dest=/etc/monit/monitrc
    no_log: true

  - name: restart monit service
    service: name=monit state=restarted

  - name: disable ssh root access without password
    lineinfile: dest=/etc/ssh/sshd_config regexp="^PermitRootLogin" line="PermitRootLogin without-password" state=present

  - name: restart ssh service
    service: name=ssh state=restarted
