---
- hosts: all
  remote_user: root

  vars_prompt:
    - name: "mongosupass"
      prompt: "Set your mongodb superAdmin password"
      private: yes

    - name: "mongogppass"
      prompt: "Set the mongodb password for the app's user "
      private: yes

    - name: "sendgriduser"
      prompt: "Enter your sendgrid username"
      private: no

    - name: "sendgridpass"
      prompt: "Enter your sendgrid password"
      private: yes

    - name: "sendgridapikey"
      prompt: "Enter your sendgrid API key"
      private: yes

    - name: "xapikey"
      prompt: "Enter your x-api-key"
      private: yes

    - name: "monitpass"
      prompt: "Set the password for the monitoring interface access, the username will be the app's user"
      private: yes

  handlers:
    - name: restart mongod
      systemd: name=mongod state=restarted

    - name: restart nginx
      systemd: name=nginx state=restarted

    - name: stop monit service
      systemd: name=monit state=stopped

    - name: restart monit 
      systemd: name=monit state=restarted
    
    - name: restart ssh
      systemd: name=ssh state=restarted

  tasks:
  # - name: utf8 locale
  #   action: command sudo update-locale LC_ALL=C.UTF-8

  - name: set default locale
    lineinfile: dest=/etc/environment
      regexp="LC_ALL"
      line="LC_ALL=\"C.UTF-8\""

  - name: Create '{{ user }}' users in instance
    user: name={{ user }} shell=/bin/bash createhome=yes comment='main user'

  - name: Add '{{ user }}' to sudoers
    template: src=templates/sudoers-user.j2 dest=/etc/sudoers validate='visudo -cf %s'

  - name: Set default sources
    apt_repository:
      repo: '{{ item }}'
      update_cache: yes
    loop:
      - 'deb http://deb.debian.org/debian/ {{ ansible_distribution_release }} main'
      - 'deb http://security.debian.org/ {{ ansible_distribution_release }}/updates main'
      - 'deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main'

  - name: Install packages
    apt:
      state: present
      name:
        - git
        - curl
        - gnupg2
        - nginx
        - python-pip
        - fail2ban
        - monit
        - ntpdate
        - certbot
        - python-certbot-nginx
        - unattended-upgrades
        - build-essential
        - nodejs
        - npm
        - ruby
        - ruby-dev
        - zlib1g-dev

  - name: Add mongo apt key
    apt_key:
      keyserver: hkp://keyserver.ubuntu.com:80
      id: 4B7C549A058F8B6B

  - name: Add mongo apt repository
    apt_repository:
      repo: 'deb http://repo.mongodb.org/apt/debian {{ ansible_distribution_release }}/mongodb-org/{{ mongo_version }} main'
      update_cache: yes

  - name: Install mongodb-org
    apt:
      state: present
      name: mongodb-org

  - name: Ensure mongod is running
    systemd: name=mongod state=started enabled=true

  - name: Install pm2
    npm: name=pm2 global=yes

  - name: Install pm2 logrotate
    command: pm2 install logrotate

  - name: Install pymongo module
    pip: name=pymongo

  - name: Configure mongodb DB superuser
    mongodb_user: database=admin name={{ mongosu }} password={{ mongosupass }} state=present roles='root'
    no_log: true
    notify: restart mongod

  - name: Configure mongodb DB {{ user }} user
    mongodb_user: login_user={{ mongosu }} login_password={{ mongosupass }} database=db_deploy name={{ user }} password={{ mongogppass }} state=present roles='readWrite'
    no_log: true
    notify: restart mongod

  - name: Clone consultation-app from repository
    git: accept_hostkey=yes repo=https://github.com/consultation-gouv/deploiement.consultation.git dest=/home/{{ user }}/consultation-app force=yes

  - name: Clone consultation-website from repository
    git: accept_hostkey=yes repo=https://github.com/consultation-gouv/consultation.gouv.fr.git dest=/home/{{ user }}/consultation-website force=yes refspec={{ env }}

  # - name: Get SSL certificates
  #   command: "certbot certonly --authenticator webroot --webroot-path /var/www/html --domain {{ item }} --email {{ adminemail }} --agree-tos -n"
  #   loop: "{{ [domainname,] + extra_domains + nginx_sites | difference(['front']) | product([domainname,] + extra_domains) | map('join', '.') | list }}"
  #   tags:
  #     - letsencrypt

  # - name: Add images to consultation-app
  #   copy: src=~/consultation-app_ansible-playbook-v2/images dest=/home/{{ user }}/consultation-app/public/ owner={{ user }} group={{ user }} mode="u=rw,g=r,o=r"
  #   no_log: true

  - name: increase nginx server_names_hash_bucket_size
    copy:
      src: "file/nginx-hash-bucket-size.conf"
      dest: "/etc/nginx/conf.d/hash-bucket-size.conf"
    notify: restart nginx
    tags:
      - nginx

  - name: define nginx sites
    template:
      src: "templates/nginx-sites/{{ item.0 }}.j2"
      dest: "/etc/nginx/sites-available/{{ item.0 }}.{{ item.1 }}"
    loop: "{{ nginx_sites | product([domainname,] + extra_domains) | list }}"
    notify: restart nginx
    tags:
      - nginx

  - name: enable nginx sites
    file:
      src: "/etc/nginx/sites-available/{{ item }}"
      dest: "/etc/nginx/sites-enabled/{{ item }}"
      state: link
    loop: "{{ nginx_sites | product([domainname,] + extra_domains) | map('join', '.') | list }}"
    notify: restart nginx
    tags:
      - nginx

  - name: create .env file
    template: src=templates/env_file.j2 dest=/home/{{ user }}/consultation-app/.env
    no_log: true

  - name: create .env file for api server
    template: src=templates/env_file.j2 dest=/home/{{ user }}/consultation-app/node_api_server/.env

  - name: Change owner of consultation-app
    file: path="/home/{{ user }}/consultation-app" owner={{ user }} group={{ user }} mode=u=rwX,g=rX,o=rX recurse=yes state=directory

  - name: copy reference database dump to instance
    copy: src=file/{{ mongodump_archive }} dest=/home/{{ user }}/ owner={{ user }} group={{ user }} mode="u=rw,g=r,o=r"

  - name: fill in database from the dump
    command: "/usr/bin/mongorestore --gzip --archive={{ mongodump_archive }} chdir=/home/{{ user }}/"

  - name: Install required node packages and launch platform
    become: true
    become_user: "{{ user }}"
    command: "{{ item }} chdir=/home/{{ user }}/consultation-app"
    with_items:
      - npm install
      - bash -lc "cd node_api_server && npm install"
      - pm2 start ecosystem.json

  - name: Install Jekyll, deps and generate website
    command: "{{ item }} chdir=/home/{{ user }}/consultation-website"
    with_items:
      - gem install bundler -v 1.17.1
      - bundle install
      - bundle exec jekyll build

  - name: Change owner of consultation-website
    file: path={{ item }} owner={{ user }} group={{ user }} mode=u=rwX,g=rX,o=rX recurse=yes
    with_items:
      - /home/{{ user }}/consultation-website

  - name: create email-report.sh
    template: src=templates/email-report.sh.j2 dest=/home/{{ user }}/consultation-app/email-report.sh mode=755

  - name: install email-report cron
    when: env == "production"
    cron:
      name: "Daily email report"
      special_time: daily
      job: /home/{{ user }}/consultation-app/email-report.sh

  - name: Set configuration for monitoring
    template: src=templates/monitconf.j2 dest=/etc/monit/monitrc
    notify: restart monit
    no_log: true

  - name: Authorize SSH keys for root access
    authorized_key:
      user: root
      state: present
      key: '{{ item }}'
    with_file:
      - file/seb.rsa.pub

  - name: 'Authorize SSH keys for {{ user }} access'
    authorized_key:
      user: '{{ user }}'
      state: present
      key: '{{ item }}'
    with_file:
      - file/circle-ci.rsa.pub

  - name: disable ssh root access with password
    lineinfile: dest=/etc/ssh/sshd_config regexp="^PermitRootLogin" line="PermitRootLogin without-password" state=present
    notify: restart ssh

  - name: disable ssh access with password
    lineinfile: dest=/etc/ssh/sshd_config regexp="^PasswordAuthentication" line="PasswordAuthentication no" state=present
    notify: restart ssh
